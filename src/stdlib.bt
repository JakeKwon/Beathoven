pitch[] pitches = [
C0, C0#, D0, D0#, E0, F0, F0#, G0, G0#, A0, A0#, B0,
C1, C1#, D1, D1#, E1, F1, F1#, G1, G1#, A1, A1#, B1,
C2, C2#, D2, D2#, E2, F2, F2#, G2, G2#, A2, A2#, B2,
C3, C3#, D3, D3#, E3, F3, F3#, G3, G3#, A3, A3#, B3,
C4, C4#, D4, D4#, E4, F4, F4#, G4, G4#, A4, A4#, B4,
C5, C5#, D5, D5#, E5, F5, F5#, G5, G5#, A5, A5#, B5,
C6, C6#, D6, D6#, E6, F6, F6#, G6, G6#, A6, A6#, B6,
C7, C7#, D7, D7#, E7, F7, F7#, G7, G7#, A7, A7#, B7,
C8, C8#, D8, D8#, E8, F8, F8#, G8, G8#, A8, A8#, B8,
C9, C9#, D9, D9#, E9, F9, F9#, G9, G9#, A9, A9#, B9,
C10, C10#, D10, D10#, E10, F10, F10#, G10];


/* A built-in function that copy the duration of `beats` to `melody`.
The mutable `melody` is returned. */
func Rhythm(Seq beats, Seq melody) -> Seq {
    if (len(beats) == 0) {
        print("empty beats");
        return melody;
    }
    else {
        int i = 0;
        int j;
        for j in range(0, len(melody)) {
            melody[j].d = beats[i].d;
            if (i + 1 < len(beats)) i = i + 1;
            else i = 0;
            //print(i);
        }
    }
    return melody;
}

duration w = 1/1;
duration q = 1/4;
Seq melody = <1 1 5 5 6 6 5..2/4>;
Seq beats = <q q w q q w>;
Rhythm(beats, melody);
int i;
for i in range(0, len(melody)) {
    print(str_of_Note(melody[i]), ' ');
}
